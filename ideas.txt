- Dynamically assign the areas of the matrix by doing the average of entities (Rabbits + foxes) that we should have per thread (Maintain a global counter of all living entities to avoid having to count them every generation) and divide into partial arrays (Either by row or by column, probably not by both because that might make counting and separating really hard)
- For each thread, gather a map with a list for all conflicts with neighbour threads and send this list to the corresponding thread. This should save us the time of going through slots that have no conflicts
- Now to remove the need for a middle sync point, each thread will contain two copies that store the next and previous 2 rows instead of just one. This is so we can simulate the events of that first row and see if there is going to be a new rabbit inserted into our space, so we can update our second copy with the rabbits that we moved and the rabbits that we know will be moved into our space. This information is not used and we will not create or destroy rabbits, only simulate their moves so we can put the correct slot content on every slot.
